{"version":3,"sources":["constants.js","components/Button/index.js","utils.js","components/Board/useBoard.js","components/Board/index.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["fruits","randomText","Button","onClick","item","useState","selected","setSelected","deselect","setDeselect","className","useMemo","indexOf","useEffect","prevState","randomize","end","Math","floor","random","chooseWord","newList","reference","repeat","j","columnShuffle","i","start","indexArr","0","rowShuffle","rowNumber","1","diagonalShuffle","2","multipleShuffle","indexArr1","indexArr2","indexArr3","useBoard","list","setList","selectionCount","setSelectionCount","wrongSelection","setWrongSelection","winning","setWinning","center","setCenter","indexObj","setIndexObj","selectedFruits","setSelectedFruits","shuffleMethods","3","shuffle","obj","concat","Object","values","reduce","a","b","Set","centerPayload","keys","updateStates","fillList","getSharedItems","direction","arr","flat","filter","index","sharedItems","length","window","setTimeout","forEach","x","count","n","findDirection","celebrate","selectItem","name","Board","map","type","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9a6b3ac.chunk.js","sourcesContent":["export const fruits = [\n  \"pomegranate\",\n  \"peach\",\n  \"pear\",\n  \"orange\",\n  \"sour cherry\",\n  \"apple\",\n  \"cucumber\",\n  \"mango\",\n  \"banana\",\n  \"pineapple\",\n  \"papaya\",\n  \"watermelon\",\n  \"melon\",\n  \"cherry\",\n  \"raspberry\",\n  \"strawberry\",\n  \"mulberry\",\n  \"blackberry\",\n  \"blueberry\",\n  \"plum\",\n  \"apricot\",\n  \"passion fruit\",\n  \"dragon fruit\",\n  \"sweet lemon\",\n  \"kiwi\",\n];\nexport const randomText = [\n  \"suggest\",\n  \"bag\",\n  \"ponder\",\n  \"zinc\",\n  \"come\",\n  \"slip\",\n  \"coherent\",\n  \"infamous\",\n  \"expect\",\n  \"unsightly\",\n  \"mix\",\n  \"fancy\",\n  \"meal\",\n  \"devilish\",\n  \"division\",\n  \"public\",\n  \"field\",\n  \"stop\",\n  \"material\",\n  \"fluttering\",\n  \"brass\",\n  \"adorable\",\n  \"camp\",\n  \"sit\",\n  \"tiny\",\n];\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport { fruits } from \"../../constants\";\n\nfunction Button({ onClick, item }) {\n  const [selected, setSelected] = useState(false);\n  const [deselect, setDeselect] = useState(false);\n  function handleClick() {\n    setSelected((prevState) => !prevState);\n    setDeselect((prevState) => !prevState, onClick(deselect));\n  }\n  const className = useMemo(() => {\n    if (selected) {\n      if (fruits.indexOf(item) > -1) return \"selected right\";\n      return \"selected wrong\";\n    }\n  }, [selected, item]);\n  useEffect(() => {\n    setSelected(false);\n  }, [item]);\n  return (\n    <div className={className} onClick={handleClick}>\n      <span>{item}</span>\n    </div>\n  );\n}\n\nexport default Button;\n","export function randomize(end) {\n  return Math.floor(Math.random() * Math.floor(end));\n}\n\nexport function chooseWord(newList, reference, repeat) {\n  let j = randomize(25);\n  if (!repeat) {\n    while (newList.indexOf(reference[j]) > -1) {\n      j = randomize(25);\n    }\n  }\n\n  return reference[j];\n}\n\nexport function columnShuffle() {\n  const start = randomize(5);\n  const indexArr = [];\n  let i;\n  for (i = 0; i < 5; i++) {\n    indexArr[i] = start + i * 5;\n  }\n  return { 0: indexArr };\n}\nexport function rowShuffle() {\n  /*\n   * row number 0 => 00 01 02 03 04\n   * row number 1 => 05 06 07 08 09\n   * row number 2 => 10 11 12 13 14\n   * row number 3 => 15 16 17 18 19\n   * row number 4 => 20 21 22 23 24\n   *\n   * */\n  let rowNumber = randomize(5);\n  const indexArr = [];\n  let i;\n  for (i = 0; i < 5; i++) {\n    indexArr[i] = rowNumber * 5 + i;\n  }\n  return { 1: indexArr };\n}\nexport function diagonalShuffle() {\n  /*\n   * row number 0 => 00 01 02 03 04\n   * row number 1 => 05 06 07 08 09\n   * row number 2 => 10 11 12 13 14\n   * row number 3 => 15 16 17 18 19\n   * row number 4 => 20 21 22 23 24\n   *\n   * */\n  let i;\n  const indexArr = [];\n  const side = randomize(2); // 0 or 1\n  if (side === 0) {\n    // from left to right \\\n    for (i = 0; i < 5; i++) {\n      indexArr[i] = 6 * i; //  5 * i + i\n    }\n  } else {\n    //from right to left /\n    for (i = 5; i > 0; i--) {\n      indexArr[i-1] = 4 * i; // i * 5 - i\n    }\n  }\n  return { 2: indexArr };\n}\nexport function multipleShuffle() {\n  // The simplest case of having 1 row, 1 column and 1 diagonal bingo\n  const indexArr1 = rowShuffle();\n  const indexArr2 = columnShuffle();\n  const indexArr3 = diagonalShuffle();\n  return { ...indexArr1, ...indexArr2, ...indexArr3 };\n}\n","import { useEffect, useMemo, useState } from \"react\";\nimport {\n  chooseWord,\n  columnShuffle,\n  diagonalShuffle,\n  multipleShuffle,\n  randomize,\n  rowShuffle,\n} from \"../../utils\";\nimport { fruits, randomText } from \"../../constants\";\n\nexport const useBoard = () => {\n  const [list, setList] = useState([]);\n  const [selectionCount, setSelectionCount] = useState(0);\n  const [wrongSelection, setWrongSelection] = useState(0);\n  const [winning, setWinning] = useState(false);\n  const [center, setCenter] = useState({\n    0: false, //column\n    1: false, //row\n    2: true, //diagonal\n  });\n  const [indexObj, setIndexObj] = useState({});\n  const [selectedFruits, setSelectedFruits] = useState([]);\n\n  const shuffleMethods = useMemo(() => {\n    return {\n      0: columnShuffle,\n      1: rowShuffle,\n      2: diagonalShuffle,\n      3: multipleShuffle,\n    };\n  }, []);\n\n  function fillList(indexArr, repeat) {\n    const newList = [];\n    let i;\n    for (i = 0; i < 25; i++) {\n      if (i === 12) {\n        // The free slot\n        newList[i] = \"\";\n      } else {\n        const reference = indexArr.indexOf(i) > -1 ? fruits : randomText;\n        newList[i] = chooseWord(newList, reference, repeat);\n      }\n    }\n    setList(newList);\n  }\n\n  function updateStates(obj) {\n    setIndexObj(obj);\n    setSelectionCount(0);\n    setSelectedFruits([]);\n    const centerPayload = Object.keys(obj).reduce((a, b) => {\n      a[b] = obj[b].indexOf(12) > -1;\n      return a;\n    }, {});\n    setCenter(centerPayload);\n  }\n\n  function shuffle() {\n    const selected = randomize(4); // expected output: 0, 1, 2 or 3\n    const obj = shuffleMethods[selected]();\n    let indexArr = obj[selected] || [];\n    if (selected === 3) {\n      const concat = Object.values(obj).reduce((a, b) => a.concat(b), []);\n      indexArr = [...new Set([...concat])];\n    }\n    updateStates(obj);\n    fillList(indexArr, selected === 3);\n  }\n\n  function selectItem(item, deselect) {\n    if (fruits.indexOf(item.name) > -1) {\n      setSelectionCount((prevState) => prevState + 1);\n      setSelectedFruits((prevState) => [...prevState, item.index]);\n    } else {\n      setWrongSelection((prevState) => {\n        if (deselect) {\n          return prevState - 1;\n        }\n        return prevState + 1;\n      });\n    }\n  }\n  function getSharedItems(direction) {\n    const obj = { ...indexObj };\n    delete obj[direction];\n    const arr = Object.values(obj).flat();\n    return selectedFruits.filter((item, index) => arr.indexOf(item) > -1);\n  }\n  async function celebrate(direction) {\n    const sharedItems = getSharedItems(direction);\n    setWinning(true);\n    setSelectedFruits(sharedItems);\n    setSelectionCount(sharedItems.length);\n    await setWrongSelection(0);\n    window.setTimeout(() => {\n      setWinning(false);\n    }, 3000);\n  }\n\n  function findDirection() {\n    let direction = 0;\n    Object.keys(indexObj).forEach((x) => {\n      let count = 0;\n      const reference = indexObj[x];\n      selectedFruits.forEach((n) => {\n        if (reference.indexOf(n) > -1) {\n          count += 1;\n        }\n      });\n      if (\n        count === reference.length ||\n        (count === reference.length - 1 && reference.indexOf(12) > -1)\n      ) {\n        direction = x;\n      }\n    });\n    return direction;\n  }\n\n  useEffect(() => {\n    shuffle();\n  }, []);\n  useEffect(() => {\n    const direction = findDirection();\n    if (\n      (selectionCount === 5 || (selectionCount === 4 && center[direction])) &&\n      wrongSelection === 0\n    ) {\n      celebrate(direction);\n    }\n  }, [selectionCount, wrongSelection, center]);\n  return {\n    selectItem,\n    shuffle,\n    list,\n    winning,\n  };\n};\n","import Button from \"../Button\";\nimport React from \"react\";\nimport { useBoard } from \"./useBoard\";\n\nfunction Board() {\n  const { selectItem, shuffle, list, winning } = useBoard();\n  return (\n    <>\n      <div className={`plate ${winning ? \"winning\" : \"\"}`}>\n        {list.map((item, index) => {\n          return (\n            <Button\n              onClick={(deselect) =>\n                selectItem({ index, name: item }, deselect)\n              }\n              item={item}\n              key={`${item}-${index}`}\n            />\n          );\n        })}\n      </div>\n      <button type=\"button\" onClick={shuffle} className=\"restart\">\n        Restart The Game\n      </button>\n    </>\n  );\n}\nexport default Board;\n","import \"./App.scss\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport Button from \"../Button\";\nimport { fruits, randomText } from \"../../constants\";\nimport {\n  chooseWord,\n  columnShuffle,\n  diagonalShuffle,\n  multipleShuffle,\n  randomize,\n  rowShuffle,\n} from \"../../utils\";\nimport Board from \"../Board\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Fruit Bingo</h1>\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}